Parameters:
  KeyName:
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern : ".+"
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  JenkinsInstanceType:
    Description: EC2 instance type for Jenkins Server
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
    ConstraintDescription: must be a valid EC2 instance type.

Mappings:
  AWSRegionArch2AMI:
    eu-central-1:
      AMI: ami-0b418580298265d5c
    eu-west-1:
      AMI: ami-035966e8adab4aaad
    eu-west-2:
      AMI: ami-006a0174c6c25ac06
    eu-west-3:
      AMI: ami-096b8af6e7e8fb927
    eu-north-1:
      AMI: ami-0b7937aeb16a7eb94
    sa-east-1:
      AMI: ami-0ad7b0031d41ed4b9
    us-east-1:
      AMI: ami-07ebfd5b3428b6f4d
    us-east-2:
      AMI: ami-0fc20dd1da406780b
    us-west-1:
      AMI: ami-03ba3948f6c37a4b0
    us-west-2:
      AMI: ami-0d1cd67c26f5fca19

Resources:
  JenkinsServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref JenkinsInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref ServerSecurityGroup
        - !Ref SSHSecurityGroup
      Tags:
       - Key: Name
         Value: Jenkins Server
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "30"
            DeleteOnTermination: true
            VolumeType: "gp2"
      UserData:
        Fn::Base64: |
           #!/bin/bash
           sudo apt update
           sudo apt install default-jdk wget -y
           wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
           sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
           sudo apt update
           # install Jenkins
           sudo apt install jenkins -y
           sudo systemctl status jenkins
           sudo systemctl enable jenkins.service
           sudo systemctl start jenkins.service
           sleep 10
           sudo cat /var/lib/jenkins/secrets/initialAdminPassword > /home/ubuntu/jenkins-first-access.txt
           sudo apt install tidy -y
           # install Docker
           sudo apt update
           sudo apt install \
                apt-transport-https \
                ca-certificates \
                curl \
                gnupg-agent \
                software-properties-common -y
           sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
           sudo apt-key fingerprint 0EBFCD88
           sudo add-apt-repository \
               "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
               $(lsb_release -cs) \
               stable"
           sudo apt update
           sudo apt install docker-ce docker-ce-cli containerd.io -y
           sudo usermod -a -G docker $USER
           sudo usermod -a -G docker jenkins
           # enable docker to store everything on EBS volume
           sudo mkfs -t ext4 /dev/xvdk
           sudo mount /dev/xvdf /var/lib/docker


  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP access via port 8080 + SSH access"
      SecurityGroupIngress:
      - CidrIp: !Ref SSHLocation
        FromPort: '8080'
        IpProtocol: tcp
        ToPort: '8080'
      - CidrIp: !Ref SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      # if non-default VPC used, specify:
      # SecurityGroupEgress:
      # - IpProtocol: tcp
      #   FromPort: '0'
      #   ToPort: '65535'
      #   CidrIp: 0.0.0.0/0

  # our EC2 security group
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22

  JenkinsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  JenkinsInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref JenkinsRole
  JenkinsPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: JenkinsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: '*'
          - Effect: Allow
            Action:
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:Describe*"
              - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
              - "elasticloadbalancing:Describe*"
              - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
              - "elasticloadbalancing:DeregisterTargets"
              - "elasticloadbalancing:DescribeTargetGroups"
              - "elasticloadbalancing:DescribeTargetHealth"
              - "elasticloadbalancing:RegisterTargets"
            Resource: '*'
      Roles:
        - !Ref JenkinsRole
